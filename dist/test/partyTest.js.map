{"version":3,"sources":["../../server/test/partyTest.js"],"names":[],"mappings":"AAAA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"partyTest.js","sourcesContent":["// import chai from 'chai';\n// import chaiHttp from 'chai-http';\n// import server from '../app';\n\n\n// // eslint-disable-next-line no-unused-vars\n// const should = chai.should();\n\n// chai.use(chaiHttp);\n\n// describe('Demo test', () => {\n//   it('This is demo test and actually tests nothing', () => {\n//     ('one').should.equal('one');\n//   });\n// });\n\n// describe('/POST Party Endpoint', () => {\n//   const correctDetails = {\n//     name: 'party name',\n//     logoUrl: 'logo.jpg',\n//   };\n//   const wrongDetails = {\n//     name: correctDetails.name,\n//   };\n\n//   it('should be able to CREATE/POST a party with all required fields', (done) => {\n//     chai.request(server)\n//       .post('/api/v1/parties')\n//       .send(correctDetails)\n//       .end((request, response) => {\n//         response.body.should.have.property('statusMessage');\n//         response.body.statusMessage.should.equal('Party created successfully');\n//         response.statusCode.should.equal(201);\n//         response.body.should.be.a('object');\n//         done();\n//       });\n//   });\n\n//   it('should fail if the fields are not completely entered', (done) => {\n//     chai.request(server)\n//       .post('/api/v1/parties')\n//       .send(wrongDetails)\n//       .end((request, response) => {\n//         response.statusCode.should.equal(400);\n//         response.body.statusMessage.should.equal('All fields are required');\n//         response.body.data.should.be.a('array');\n//         response.body.data.length.should.be.equal(0);\n//         done();\n//       });\n//   });\n// });\n\n\n// describe('/GET parties', () => {\n//   it('it should be able GET all parties', (done) => {\n//     chai.request(server)\n//       .get('/api/v1/parties')\n//       .end((request, response) => {\n//         response.should.have.status(200);\n//         response.body.should.be.a('object');\n//         done();\n//       });\n//   });\n// });\n\n// describe('/GET/:partyId party', () => {\n//   const validParty = {\n//     id: 1,\n//     name: 'party name',\n//     logoUrl: 'chi.jpg',\n//   };\n//   const invalidParty = {\n//     name: 'party name',\n//     logoUrl: 'chi.jpg',\n//   };\n\n//   it('it should be able GET a party', (done) => {\n//     chai.request(server)\n//       .get(`/api/v1/parties/${validParty.id}`)\n//       .end((request, response) => {\n//         response.should.have.status(200);\n//         done();\n//       });\n//   });\n\n//   it('should only return a valid party', (done) => {\n//     chai.request(server)\n//       .get(`/api/v1/parties/${invalidParty.id}`)\n//       .end((request, response) => {\n//         response.should.have.status(404);\n//         response.body.statusMessage.should.equal('Party does not exist');\n//         done();\n//       });\n//   });\n// });\n\n// describe('/PATCH a Party', () => {\n//   const validParty = {\n//     id: 1,\n//     name: 'calix',\n//   };\n//   const editedvalidParty = {\n//     id: validParty.id,\n//     name: `${validParty.name}cgh`,\n//   };\n\n//   it('should be able to edit a parties name', (done) => {\n//     chai.request(server)\n//       .patch(`/api/v1/parties/${validParty.id}/${validParty.name}`)\n//       .send(editedvalidParty)\n//       .end((request, response) => {\n//         response.should.have.status(200);\n//         response.body.statusMessage.should.equal('Party updated successfully');\n//         done();\n//       });\n//   });\n// });\n\n// describe('/Delete party', () => {\n//   const deleteParty = {\n//     id: 1,\n//     name: 'calix',\n//   };\n//   it('should delete a party', (done) => {\n//     chai.request(server)\n//       .delete(`/api/v1/parties/${deleteParty.id}`)\n//       .end((request, response) => {\n//         response.should.have.status(404);\n//         response.body.statusMessage.should.equal('party does not exist');\n//         done();\n//       });\n//   });\n// });"]}