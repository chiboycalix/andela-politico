{"version":3,"sources":["../../server/test/officeTest.js"],"names":[],"mappings":"AAAA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"officeTest.js","sourcesContent":["// import chai from 'chai';\n// import chaiHttp from 'chai-http';\n\n// import server from '../app';\n// import offices from '../db/officeDB';\n\n// // eslint-disable-next-line no-unused-vars\n// const should = chai.should();\n\n// chai.use(chaiHttp);\n\n// describe('/POST office', () => {\n//   const correctDetails = {\n//     type: 'logo.jpg',\n//     name: 'office name',\n//   };\n//   const wrongDetails = {\n//     name: 'party name',\n//   };\n\n//   it('should not post an Office with a missing field', (done) => {\n//     chai.request(server)\n//       .post('/api/v1/offices')\n//       .send(wrongDetails)\n//       .end((request, response) => {\n//         response.body.should.have.property('statusMessage');\n//         response.body.statusMessage.should.equal('All fields are required');\n//         response.should.have.status(400);\n//         done();\n//       });\n//   });\n  \n//   it('it should be able to POST a party with all fields being entered', (done) => {\n//     chai.request(server)\n//       .post('/api/v1/offices')\n//       .send(correctDetails)\n//       .end((request, response) => {\n//         response.body.statusMessage.should.equal('Office created successfully');\n//         response.should.have.status(201);\n//         response.body.should.have.property('statusMessage');\n//         response.body.should.be.a('object');\n//         done();\n//       });\n//   });\n// });\n\n\n\n// describe('/GET offices', () => {\n//   it('it should be able GET all offices', (done) => {\n//     chai.request(server)\n//       .get('/api/v1/offices')\n//       .end((request, response) => {\n//         response.should.have.status(200);\n//         response.body.should.have.property('statusMessage');\n//         response.body.statusMessage.should.equal('Success');\n//         response.body.should.be.a('object');\n//         done();\n//       });\n//   });\n// });\n\n// describe('/GET/:officeId office', () => {\n//   const validOffice = {\n//     id: 1,\n//     name: 'party name',\n//     type: 'chi.jpg',\n//   };\n//   const invalidOffice = {\n//     name: 'party name',\n//     type: 'chi.jpg',\n//   };\n  \n//   it('it should be able GET a party', (done) => {\n//     chai.request(server)\n//       .get(`/api/v1/offices/${validOffice.id}`)\n//       .end((request, response) => {\n//         response.should.have.status(200);\n//         response.body.should.be.a('Object');\n//         response.body.should.have.property('statusMessage');\n//         response.body.statusMessage.should.equal('success');\n//         done();\n//       });\n//   });\n  \n//   it('should only return a valid party', (done) => {\n//     chai.request(server)\n//       .get(`/api/v1/offices/${invalidOffice.id}`)\n//       .end((request, response) => {\n//         response.should.have.status(404);\n//         response.body.should.have.property('statusMessage');\n//         response.body.statusMessage.should.equal('Office does not exist');\n//         done();\n//       });\n//   });\n// });\n\n// describe('/GET offices', () => {\n//   beforeEach((done) => {\n//     offices.splice(0, offices.length);\n//     offices.length = 0;\n//     done();\n//   });\n//   it('it should return an empty array if there is no office present', (done) => {\n//     chai.request(server)\n//       .get('/api/v1/offices')\n//       .send(offices)\n//       .end((request, response) => {\n//         response.should.have.status(404);\n//         response.body.should.have.property('statusMessage');\n//         response.body.statusMessage.should.equal('No Office in your database');\n//         response.body.should.have.property('data');\n//         response.body.data.should.be.a('array');\n//         response.body.data.length.should.be.equal(0);\n//         done();\n//       });\n//   });\n// });\n\n"]}